{"version":3,"sources":["baloon-content.js","navigation.js"],"names":["jQuery","document","ready","$","STATUS_FREE","STATUS_HOUSE_READY","PRICE_PER_SQM","STATUS_SOLD","_defineProperty","STATUS_HOUSE_BUILDING","STATUS_RESERVED","statusColors","locationData","status","number","area","path77406","path80784","setStatusColor","element","css","Object","forEach","id","attrs","$elem","length","data","keys","attr","cursor","opacity","transition","this","on","price","updateField","selector","value","$el","show","find","text","hide","event","bottom","left","$map","$svg","$inner","viewBox","baseVal","svgWidth","width","svgHeight","height","translate","x","y","isDragging","start","clamp","val","min","max","Math","lastTouchDist","getMinScale","arguments","enabled","mapWidth","mapHeight","scaledWidth","scaledHeight","minX","maxX","minY","concat","scale","clientX","window","getDistance","p1","p2","dx","hypot","clientY","getMidpoint","updateTransform","e","preventDefault","setTransition","zoomSpeed","oldScale","originalEvent","rect","getBoundingClientRect","mouseX","mouseY","touches","touch","dy","top","lastTouchMid","dist","mid","scaleFactor","centerInitialView"],"mappings":"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","file":"main.min.js","sourcesContent":["jQuery(document).ready(function ($) {\r\n    const PRICE_PER_SQM = 5303;\r\n\r\n    // Статусы\r\n    const STATUS_FREE = 'Свободный участок';\r\n    const STATUS_HOUSE_READY = 'Участок с готовым домом';\r\n    const STATUS_HOUSE_BUILDING = 'Участок со строящимся домом';\r\n    const STATUS_RESERVED = 'Забронированный участок';\r\n    const STATUS_SOLD = 'Проданный участок';\r\n\r\n    const statusColors = {\r\n        [STATUS_FREE]: '#91CD2F',\r\n        [STATUS_HOUSE_READY]: '#7113BA',\r\n        [STATUS_HOUSE_BUILDING]: '#1665FF',\r\n        [STATUS_RESERVED]: '#fff',\r\n        [STATUS_SOLD]: '#A62E1B'\r\n    };\r\n\r\n    // Данные элементов (ключ — id path)\r\n    const locationData = {\r\n        'path62461': { status: STATUS_FREE, number: '3665', area: 1669 },\r\n        'path62465': { status: STATUS_SOLD, number: '3277', area: 1132 },\r\n        'path62463': { status: STATUS_HOUSE_BUILDING, number: '3276', area: 1810 },\r\n        'path77406': { status: STATUS_HOUSE_READY, number: '3444', area: 1547 },\r\n        'path80784': { status: STATUS_RESERVED, number: '3257', area: 1323 },\r\n        'p1-1': { number: 'Участок 3257' }\r\n    };\r\n\r\n    // Функция окраски\r\n    function setStatusColor(element, status) {\r\n        if (statusColors[status]) {\r\n            $(element).css('fill', statusColors[status]);\r\n        }\r\n    }\r\n\r\n    // Инициализация: добавляем атрибуты и стили\r\n    Object.keys(locationData).forEach(function (id) {\r\n        const $elem = $('#' + id);\r\n        if (!$elem.length) return;\r\n\r\n        const data = locationData[id];\r\n        const attrs = {};\r\n\r\n        // Если указан статус\r\n        if (data.status) {\r\n            attrs['data-locationname'] = data.status;\r\n            setStatusColor($elem, data.status);\r\n        }\r\n\r\n        // Если указан номер\r\n        if (data.number) {\r\n            attrs['data-locationnumber'] = data.number;\r\n        }\r\n\r\n        // Если указана площадь (и цена)\r\n        if (data.area) {\r\n            attrs['data-locationarea'] = data.area;\r\n            attrs['data-locationprice'] = data.area * PRICE_PER_SQM;\r\n        }\r\n\r\n        // Применяем атрибуты (если они есть)\r\n        if (Object.keys(attrs).length) {\r\n            $elem.attr(attrs);\r\n        }\r\n\r\n        // Стили с плавной прозрачностью для всех элементов\r\n        $elem.css({\r\n            'cursor': 'pointer',\r\n            'opacity': '0.7',\r\n            'transition': 'opacity 0.3s ease'\r\n        }).hover(\r\n            function () { $(this).css('opacity', '1'); },\r\n            function () { $(this).css('opacity', '0.7'); }\r\n        );\r\n    });\r\n\r\n    // Клик по элементу (если он есть в locationData)\r\n    $('#map').on('click', 'path', function () {\r\n        const id = $(this).attr('id');\r\n        if (!id || !locationData[id]) return;\r\n\r\n        const data = locationData[id];\r\n        const status = data.status || '';\r\n        const number = data.number || '';\r\n        const area = data.area || '';\r\n        const price = data.area ? data.area * PRICE_PER_SQM : '';\r\n\r\n        // Функция для замены текста и управления видимостью\r\n        function updateField(selector, value) {\r\n            const $el = $(selector);\r\n            if (value) {\r\n                $el.show().find('span').text(value);\r\n            } else {\r\n                $el.hide();\r\n            }\r\n        }\r\n\r\n        // Заполняем balloon с проверкой на наличие данных\r\n        updateField(\".location__title\", number);\r\n        updateField(\".location__status\", status);\r\n        updateField(\".location__area\", area);\r\n        updateField(\".location__price\", price);\r\n\r\n        if (status) setStatusColor($(this), status);\r\n    });\r\n\r\n    // Закрытие balloon\r\n    $('.balloon__close-button').on('click', function (event) {\r\n        event.preventDefault();\r\n        $(\".balloon\").css({ \"bottom\": \"0\", \"left\": \"0\" });\r\n    });\r\n});\r\n","\r\n    $(function() {\r\n      const $map = $('#map');\r\n      const $svg = $('#svg');\r\n      const $inner = $('#inner');\r\n\r\n      const viewBox = $svg[0].viewBox.baseVal;\r\n      const svgWidth = viewBox.width;\r\n      const svgHeight = viewBox.height;\r\n\r\n      let scale = 1;\r\n      let translate = { x: 0, y: 0 };\r\n      let isDragging = false;\r\n      let start = { x: 0, y: 0 };\r\n      let lastTouchDist = null;\r\n      let lastTouchMid = null;\r\n\r\n      function clamp(val, min, max) {\r\n        return Math.max(min, Math.min(max, val));\r\n      }\r\n\r\n      function getMinScale() {\r\n        return Math.max(\r\n          $map.width() / svgWidth,\r\n          $map.height() / svgHeight\r\n        );\r\n      }\r\n\r\n      function setTransition(enabled, mode = 'mouse') {\r\n        if (!enabled) {\r\n          $inner.css('transition', 'none');\r\n        } else if (mode === 'touch') {\r\n          $inner.css('transition', 'transform 0.05s linear');\r\n        } else {\r\n          $inner.css('transition', 'transform 0.2s ease-out');\r\n        }\r\n      }\r\n\r\n      function updateTransform() {\r\n        const mapWidth = $map.width();\r\n        const mapHeight = $map.height();\r\n\r\n        const scaledWidth = svgWidth * scale;\r\n        const scaledHeight = svgHeight * scale;\r\n\r\n        const minX = Math.min(0, mapWidth - scaledWidth);\r\n        const minY = Math.min(0, mapHeight - scaledHeight);\r\n\r\n        const maxX = 0;\r\n        const maxY = 0;\r\n\r\n        translate.x = clamp(translate.x, minX, maxX);\r\n        translate.y = clamp(translate.y, minY, maxY);\r\n\r\n        $inner.css('transform', `translate(${translate.x}px, ${translate.y}px) scale(${scale})`);\r\n      }\r\n\r\n      function centerInitialView() {\r\n        const mapWidth = $map.width();\r\n        const mapHeight = $map.height();\r\n\r\n        // Заполняем экран (с обрезкой краёв по большей оси)\r\n        scale = Math.max(\r\n          mapWidth / svgWidth,\r\n          mapHeight / svgHeight\r\n        );\r\n\r\n        const scaledWidth = svgWidth * scale;\r\n        const scaledHeight = svgHeight * scale;\r\n\r\n        translate.x = (mapWidth - scaledWidth) / 2;\r\n        translate.y = (mapHeight - scaledHeight) / 2;\r\n\r\n        updateTransform();\r\n      }\r\n\r\n      // Мышь\r\n      $svg.on('mousedown', function(e) {\r\n        isDragging = true;\r\n        setTransition(false);\r\n        start = { x: e.clientX - translate.x, y: e.clientY - translate.y };\r\n        $svg.css('cursor', 'grabbing');\r\n      });\r\n\r\n      $(window).on('mousemove', function(e) {\r\n        if (!isDragging) return;\r\n        translate = {\r\n          x: e.clientX - start.x,\r\n          y: e.clientY - start.y\r\n        };\r\n        updateTransform();\r\n      });\r\n\r\n      $(window).on('mouseup', function() {\r\n        isDragging = false;\r\n        $svg.css('cursor', 'grab');\r\n      });\r\n\r\n      $svg.on('wheel', function(e) {\r\n        e.preventDefault();\r\n        setTransition(true, 'mouse');\r\n\r\n        const zoomSpeed = 0.0005;\r\n        const oldScale = scale;\r\n        scale += -e.originalEvent.deltaY * zoomSpeed;\r\n\r\n        scale = Math.max(scale, getMinScale()); // без верхнего ограничения\r\n\r\n        const rect = $svg[0].getBoundingClientRect();\r\n        const mouseX = e.clientX - rect.left;\r\n        const mouseY = e.clientY - rect.top;\r\n\r\n        const dx = mouseX - translate.x;\r\n        const dy = mouseY - translate.y;\r\n\r\n        translate.x -= dx * (scale / oldScale - 1);\r\n        translate.y -= dy * (scale / oldScale - 1);\r\n\r\n        updateTransform();\r\n      });\r\n\r\n      // Тач\r\n      $svg.on('touchstart', function(e) {\r\n        setTransition(true, 'touch');\r\n        const touches = e.originalEvent.touches;\r\n\r\n        if (touches.length === 1) {\r\n          isDragging = true;\r\n          const touch = touches[0];\r\n          start = { x: touch.clientX - translate.x, y: touch.clientY - translate.y };\r\n        } else if (touches.length === 2) {\r\n          lastTouchDist = getDistance(touches[0], touches[1]);\r\n          lastTouchMid = getMidpoint(touches[0], touches[1]);\r\n        }\r\n      });\r\n\r\n      $svg.on('touchmove', function(e) {\r\n        e.preventDefault();\r\n        setTransition(true, 'touch');\r\n        const touches = e.originalEvent.touches;\r\n\r\n        if (touches.length === 1 && isDragging) {\r\n          const touch = touches[0];\r\n          translate = {\r\n            x: touch.clientX - start.x,\r\n            y: touch.clientY - start.y\r\n          };\r\n          updateTransform();\r\n        } else if (touches.length === 2) {\r\n          const dist = getDistance(touches[0], touches[1]);\r\n          const mid = getMidpoint(touches[0], touches[1]);\r\n\r\n          if (lastTouchDist && lastTouchMid) {\r\n            const oldScale = scale;\r\n            const scaleFactor = dist / lastTouchDist;\r\n            scale *= scaleFactor;\r\n\r\n            scale = Math.max(scale, getMinScale());\r\n\r\n            const dx = mid.x - translate.x;\r\n            const dy = mid.y - translate.y;\r\n\r\n            translate.x -= dx * (scale / oldScale - 1);\r\n            translate.y -= dy * (scale / oldScale - 1);\r\n\r\n            updateTransform();\r\n          }\r\n\r\n          lastTouchDist = dist;\r\n          lastTouchMid = mid;\r\n        }\r\n      });\r\n\r\n      $svg.on('touchend', function(e) {\r\n        const touches = e.originalEvent.touches;\r\n        if (touches.length < 2) {\r\n          lastTouchDist = null;\r\n          lastTouchMid = null;\r\n        }\r\n        if (touches.length === 0) {\r\n          isDragging = false;\r\n        }\r\n      });\r\n\r\n      function getDistance(p1, p2) {\r\n        const dx = p2.clientX - p1.clientX;\r\n        const dy = p2.clientY - p1.clientY;\r\n        return Math.hypot(dx, dy);\r\n      }\r\n\r\n      function getMidpoint(p1, p2) {\r\n        return {\r\n          x: (p1.clientX + p2.clientX) / 2,\r\n          y: (p1.clientY + p2.clientY) / 2\r\n        };\r\n      }\r\n\r\n      $(window).on('resize', centerInitialView);\r\n      centerInitialView();\r\n    });\r\n"]}